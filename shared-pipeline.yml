parameters:                 # Pass parameters from upper pipeline otherwise default values are applied.
  vmImage: ''               # Agent`s images
  terraformVersion: ''      # Terraform version
  tfApply: 'true'           # Terraform apply action(boolean type)
  tfVars: ''
#  env: ''

steps:
  - checkout: self

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        # Write your commands here
        echo "The value for variable 'storageresourcegroup' is $(storageresourcegroup)"
        echo "The value for variable 'storageaccount' is $(storageaccount)"
        echo "The value for variable 'storageblob' is $(storageblob)"
        echo "The value for variable 'tfVars' is ${{ parameters.tfVars }}"
        echo "The value for variable 'tfState' is ${{ parameters.tfState }}"
        echo "The value for variable 'terraformVersion' is ${{ parameters.terraformVersion }}"
    displayName: 'Output values'

  - task: DownloadSecureFile@1
    name: secrets
    displayName: 'Download secrets'
    inputs:
      secureFile: secrets.tfvars

  - task: CopyFiles@2
    displayName: 'Copy secrets'
    inputs:
      SourceFolder: '$(Agent.TempDirectory)'
      Contents: '$(secrets.secureFilePath)'
      TargetFolder: '$(Agent.BuildDirectory)'

  - task: CopyFiles@2
    displayName: 'Copy terraform files'
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)'
      Contents: |
        **
      TargetFolder: '$(Agent.BuildDirectory)'

  - task: replacetokens@3
    displayName: 'Replace tokens'
    inputs:
      rootDirectory: '$(Agent.BuildDirectory)'
      targetFiles: |
        *.tf
        *.tfvars
      encoding: 'auto'
      writeBOM: true
      escapeType: 'none'
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}

  - task: TerraformTaskV1@0
    displayName: 'Terraform : init'
    inputs:
      workingDirectory: '$(Agent.BuildDirectory)'
      backendServiceArm: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'
      backendAzureRmResourceGroupName: '$(storageresourcegroup)'
      backendAzureRmStorageAccountName: '$(storageaccount)'
      backendAzureRmContainerName: '$(storageblob)'
      backendAzureRmKey: ${{ parameters.tfState }}

  - task: TerraformTaskV1@0
    displayName: 'Terraform: plan'
    inputs:
      command: plan
      workingDirectory: '$(Agent.BuildDirectory)'
      commandOptions: -var-file=secrets.tfvars -var-file=${{ parameters.tfVars }}
      environmentServiceNameAzureRM: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'

  - task: TerraformTaskV1@0
    displayName: 'Terraform: apply'
    condition: and(succeeded(), eq('${{ parameters.tfApply }}', true))
    #    condition: and(succeeded(), in('${{ parameters.env }}', 'dev', 'qa', 'uat', 'prod'))
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(Agent.BuildDirectory)'
      commandOptions: -auto-approve -input=false -var-file=secrets.tfvars -var-file=${{ parameters.tfVars }}
      environmentServiceNameAzureRM: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'

  - powershell: |
      ""
      Write-Host "### Verify tfVars: ###"
      Write-Host "######################"
      ""
      cat ${{ parameters.tfVars }}
      ""
      Write-Host "### Verify tfApply: ###"
      Write-Host "#######################"
      ""
      Write-Host ${{ parameters.tfApply }}
      ""
      Write-Host "### Verify tfState: ###"
      Write-Host "#######################"
      ""
      Write-Host ${{ parameters.tfState }}
      ""
      Write-Host "### Verify terraformVersion: ###"
      Write-Host "######@#########################"
      ""
      Write-Host ${{ parameters.terraformVersion }}