parameters:
  vmImage: ''           # Agent`s images
  terraformVersion: ''  # Terraform version

stages:
  - stage: Build
    jobs:
    - template: terraform-build-job.yml
      parameters:
        vmImage: ${{ parameters.vmImage }}
        terraformVersion: ${{ parameters.terraformVersion }}
#      - job: BuildJob
#        pool:
#          vmImage: ${{ parameters.vmImage }}
#        continueOnError: false
#        steps:
#          - task: DownloadSecureFile@1
#            name: secrets
#            displayName: 'Download secrets'
#            inputs:
#              secureFile: secrets.tfvars
#
#          - task: CopyFiles@2
#            displayName: 'Copy secrets'
#            inputs:
#              SourceFolder: '$(Agent.TempDirectory)'
#              Contents: '$(secrets.secureFilePath)'
#              TargetFolder: '$(Agent.BuildDirectory)'
#
#          - task: CopyFiles@2
#            displayName: 'Copy terraform files'
#            inputs:
#              SourceFolder: '$(Build.Repository.LocalPath)'
#              Contents: |
#                **
#              TargetFolder: '$(Agent.BuildDirectory)'
#
#          - task: replacetokens@3
#            displayName: 'Replace tokens'
#            inputs:
#              rootDirectory: '$(Agent.BuildDirectory)'
#              targetFiles: |
#                *.tf
#                *.tfvars
#              encoding: 'auto'
#              writeBOM: true
#              escapeType: 'none'
#              actionOnMissing: 'warn'
#              keepToken: false
#              tokenPrefix: '#{'
#              tokenSuffix: '}#'
#
#          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
#            displayName: 'Install Terraform'
#            inputs:
#              terraformVersion: ${{ parameters.terraformVersion }}
#
#          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#            displayName: 'Terraform : init'
#            inputs:
#              workingDirectory: '$(Agent.BuildDirectory)'
#              backendServiceArm: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'
#              backendAzureRmResourceGroupName: '$(storageresourcegroup)'
#              backendAzureRmStorageAccountName: '$(storageaccount)'
#              backendAzureRmContainerName: '$(storageblob)'
#              backendAzureRmKey: '$(tfstate)'
#
#          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#            displayName: 'Terraform: plan'
#            inputs:
#              command: plan
#              workingDirectory: '$(Agent.BuildDirectory)'
#              commandOptions: '-var-file=secrets.tfvars'
#              environmentServiceNameAzureRM: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'

  - stage: Deploy
#    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build
    jobs:
      - deployment: DeployJob
        pool:
          vmImage: ${{ parameters.vmImage }}
        continueOnError: false
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none

                - checkout: self

                - script: dir $(Build.SourcesDirectory)

                - task: DownloadSecureFile@1
                  name: secrets
                  displayName: 'Download secrets'
                  inputs:
                    secureFile: secrets.tfvars

                - task: CopyFiles@2
                  displayName: 'Copy secrets'
                  inputs:
                    SourceFolder: '$(Agent.TempDirectory)'
                    Contents: '$(secrets.secureFilePath)'
                    TargetFolder: '$(Agent.BuildDirectory)'

                - task: CopyFiles@2
                  displayName: 'Copy terraform files'
                  inputs:
                    SourceFolder: '$(Build.Repository.LocalPath)'
                    Contents: |
                      **
                    TargetFolder: '$(Agent.BuildDirectory)'

                - task: replacetokens@3
                  displayName: 'Replace tokens'
                  inputs:
                    rootDirectory: '$(Agent.BuildDirectory)'
                    targetFiles: |
                      *.tf
                      *.tfvars
                    encoding: 'auto'
                    writeBOM: true
                    escapeType: 'none'
                    actionOnMissing: 'warn'
                    keepToken: false
                    tokenPrefix: '#{'
                    tokenSuffix: '}#'

                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: ${{ parameters.terraformVersion }}

                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
                  displayName: 'Terraform : init'
                  inputs:
                    workingDirectory: '$(Agent.BuildDirectory)'
                    backendServiceArm: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'
                    backendAzureRmResourceGroupName: '$(storageresourcegroup)'
                    backendAzureRmStorageAccountName: '$(storageaccount)'
                    backendAzureRmContainerName: '$(storageblob)'
                    backendAzureRmKey: '$(tfstate)'

                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
                  displayName: 'Terraform: plan'
                  inputs:
                    command: plan
                    workingDirectory: '$(Agent.BuildDirectory)'
                    commandOptions: '-var-file=secrets.tfvars'
                    environmentServiceNameAzureRM: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'
#                - task: DownloadBuildArtifacts@0
#                  displayName: 'Download Artifacts'
#                  inputs:
#                    buildType: 'current'
#                    downloadType: 'single'
#                    artifactName: 'drop'
#                    downloadPath: '$(Agent.BuildDirectory)'
#                - powershell: |
#                    ""
#                    Write-Host "### Listing artifacts files in $(Agent.BuildDirectory)/drop: ###"
#                    Write-Host "#################################"
#                    ""
#                    ls $(System.ArtifactsDirectory)/drop
#                    ""
#                    Write-Host "### Listing terraform.tfvars file content: ###"
#                    Write-Host "#################################"
#                    ""
#                    cat $(System.ArtifactsDirectory)/drop/terraform.tfvars
#                    ""
#                    Write-Host "### Listing secrets.tfvars file content: ###"
#                    Write-Host "#################################"
#                    ""
#                    cat $(System.ArtifactsDirectory)/drop/secrets.tfvars
#                    ""
#                    Write-Host "### Listing backend.tf file content: ###"
#                    Write-Host "#################################"
#                    ""
#                    cat $(System.ArtifactsDirectory)/drop/backend.tf
#                  displayName: 'Verify files'
#                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
#                  displayName: 'Install Terraform'
#                  inputs:
#                    terraformVersion: 0.12.19
#                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#                  displayName: 'Terraform : init'
#                  inputs:
#                    workingDirectory: '$(System.ArtifactsDirectory)/drop'
#                    backendServiceArm: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'
#                    backendAzureRmResourceGroupName: '$(storageresourcegroup)'
#                    backendAzureRmStorageAccountName: '$(storageaccount)'
#                    backendAzureRmContainerName: '$(storageblob)'
#                    backendAzureRmKey: '$(tfstate)'
#                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#                  displayName: 'Terraform : apply'
#                  inputs:
#                    command: apply
#                    workingDirectory: '$(System.ArtifactsDirectory)/drop'
#                    commandOptions: '-auto-approve -input=false terraform.tfplan'
#                    environmentServiceNameAzureRM: 'isolated test (a6edf9da-b31a-48ac-b34d-1a9673e0908c)'
